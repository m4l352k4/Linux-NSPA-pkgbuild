# Maintainer: Jordan Johnston <johnstonljordan@gmail.com>
# Maintainer: Peter Jung ptr1337 <admin@ptr1337.dev>
# Contributor: Piotr Gorski <lucjan.lucjanov@gmail.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

### Selecting the CPU scheduler
# 'cfs' - select 'Completely Fair Scheduler'
_cpusched='cfs'

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

### Tweak kernel options prior to a build via nconfig
_makemenuconfig=

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
# See, https://bugs.archlinux.org/task/31187
_NUMAdisable=y

# Compile ONLY used modules to VASTLYreduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

# Use the current kernel's .config file
# Enabling this option will use the .config of the RUNNING kernel rather than
# the ARCH defaults. Useful when the package gets updated and you already went
# through the trouble of customizing your config options.  NOT recommended when
# a new kernel is released, but again, convenient for package bumps.
_use_current=

### Running with a 1000HZ, 750Hz or  500HZ tick rate
_1k_HZ_ticks=y
_750_HZ_ticks=
_600_HZ_ticks=
_500_HZ_ticks=

### Disable MQ-Deadline I/O scheduler
_mq_deadline_disable=y

### Disable Kyber I/O scheduler
_kyber_disable=y

### Enable multigenerational LRU
_lru_enable=y

## Enable DAMON
_damon=

## enable SPECULATIVE_PAGE_FAULT
_spf_enable=y

## Enable Linux Random Number Generator
_lrng_enable=

## Apply Kernel automatic Optimization
_use_auto_optimization=y

# disable debug to lower the size of the kernel
_disable_debug=

## Enable zram/zswap ZSTD compression
_zstd_compression=y

_nf_cone=y

 pkgbase=linux-nspa-devel
_major=6.0
#_minor=4
#_minorc=$((_minor+1))
#_rcver=rc8
pkgver=${_major}
_stable=${_major}.${_minor}
#_stable=${_major}
#_stablerc=${_major}-${_rcver}
#_srcname=linux-${_stable}
_srcname=linux-rt-devel-6.0-rt11
arch=(x86_64 x86_64_v3)
pkgdesc='Linux-NSPA: PREEMPT_RT_FULL kernel with a twist'
pkgrel=4
arch=('x86_64' 'x86_64_v3')
url="https://github.com/nine7nine/Linux-NSPA"
license=('GPL2')
options=('!strip')
makedepends=('bc' 'texlive-latexextra' 'libelf' 'pahole' 'cpio' 'perl' 'tar' 'xz' 'zstd' 'xmlto' 'git' 'gcc' 'gcc-libs' 'glibc' 'binutils' 'make' 'patch')
source=(
  "https://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git/snapshot/linux-rt-devel-6.0-rt11.tar.gz"
  "config"
  "config_generic_nspa"
  "auto-cpu-optimization.sh"
  "0000-more-uarches-for-kernel-5.17+.patch"  
  "0000-TIP-locking-core_6.1-oct7.patch"
  "0000-TIP-rcu.2022.09.30-oct7.patch"
  "0001-ClearLinux-patchwork.patch"    
  "0002-MapleTree-MG_lru_6.0.patch"  
  "0003-MM-fixes_6.0.patch"
  "0004-add-sysctl-to-disallow-unprivileged-CLONE_NEWUSER-by.patch"   
  "0005-sched-fair-Compile-out-NUMA-code-entirely-when-NUMA-.patch"  
  "0006-x86-Enable-fast-strings-on-Intel-if-BIOS-hasn-t-alre.patch"  
  "0007-pinctl-amd-threaded_irqs.patch"   
  "0008-designware-i2c_IRQF_NO_THREAD.patch"  
  "0009-background_reclaim_of_hugepages.patch"  
  "0010-Reduce-SCHED_RR-timeslice-100-ms-10-jiffy.patch" 
  "0011-mm-ncrease_max_map_count.patch"   
  "0012-mm-vmscan-add-sysctl-knobs-for-protecting-the-workin.patch"   
  "0013-rcu-gp-workers.patch"  
  "0014-smp-migrate_disable.patch"   
  "0015-rtmutex-no-rcu-lock-while-spinning.patch" 
  "0016-tk-timekeeping-suspend-fixes.patch"   
  "0017-pm-suspend_tk_patches.patch" 
  "0018-sched-fix_bad_task_migration_for_rt_tasks.patch"  
  "0019-rtmutex-Limit_number_of_lock_stealing_for_non-RT_waiters.patch"   
  "0020-schedutil-Fix_deadlock_between_cpuset_and_cpu_hotplug.patch" 
  "0021-sched-fair-Minor_SIS_UTIL_optimizations.patch"
  "0022-Add_latency_priority_for_CFS_class.patch"  
  "0023-locking-semaphore-Use_wake_q_to_wake_up_processes_outside_lock_cs.patch"
  "0024-sched-all_no_BUG_ON_warn_instead.patch"
  "0025-sched-core-sched-Fix-TASK_state-comparisons.patch"
  "0026-sbitmap-fix_lockup_while_swapping.patch"
  "0027-hid-wacom-hide_in-prox_force_it_out-spam.patch"
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {

    cd ${srcdir}/$_srcname

    echo "Setting version..."
    scripts/setlocalversion --save-scmversion
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname

    local src
    for src in "${source[@]}"; do
        src="${src%%::*}"
        src="${src##*/}"
        [[ $src = *.patch ]] || continue
        echo "Applying patch $src..."
        patch -Np1 < "../$src"
    done

    echo "Setting config..."
    cp ../config .config

    if [ -n "$_use_auto_optimization" ]; then
        "${srcdir}"/auto-cpu-optimization.sh
    fi

    if [ "$_HZ_ticks" = "1000" ]; then
        echo "Setting tick rate to 1k Hz..."
        scripts/config --disable HZ_300 \
                       --enable HZ_1000 \
                       --set-val HZ 1000
    elif [ "$_HZ_ticks" = "750" ]; then
        echo "Setting tick rate to 750Hz..."
        scripts/config --disable HZ_300 \
                       --enable HZ_750 \
                       --set-val HZ 750
    elif [ "$_HZ_ticks" = "600" ]; then
        echo "Setting tick rate to 600Hz..."
        scripts/config --disable HZ_300 \
                       --enable HZ_600 \
                       --set-val HZ 600
    elif [ "$_HZ_ticks" = "500" ]; then
        echo "Setting tick rate to 500Hz..."
        scripts/config --disable HZ_300 \
                       --enable HZ_500 \
                       --set-val HZ 500
    elif [ "$_HZ_ticks" = "300" ]; then
        echo "Setting tick rate to 300Hz..."
    fi

    if [ -n "$_NUMAdisable" ]; then
        echo "Disabling NUMA from kernel config..."
        scripts/config --disable NUMA \
                       --disable AMD_NUMA \
                       --disable X86_64_ACPI_NUMA \
                       --disable NODES_SPAN_OTHER_NODES \
                       --disable NUMA_EMU \
                       --disable NEED_MULTIPLE_NODES \
                       --disable USE_PERCPU_NUMA_NODE_ID \
                       --disable ACPI_NUMA \
                       --disable ARCH_SUPPORTS_NUMA_BALANCING \
                       --disable NODES_SHIFT \
                       --undefine NODES_SHIFT \
                       --disable NEED_MULTIPLE_NODES
    fi

    if [ -n "$_mq_deadline_disable" ]; then
        echo "Disabling MQ-Deadline I/O scheduler..."
        scripts/config --disable MQ_IOSCHED_DEADLINE
    fi

    if [ -n "$_kyber_disable" ]; then
        echo "Disabling Kyber I/O scheduler..."
        scripts/config --disable MQ_IOSCHED_KYBER
    fi

    if [ -n "$_per_gov" ]; then
        echo "Setting performance governor..."
        scripts/config --disable CPU_FREQ_DEFAULT_GOV_SCHEDUTIL \
                       --enable CPU_FREQ_DEFAULT_GOV_PERFORMANCE \
                       --enable PCIEASPM \
                       --enable PCIEASPM_PERFORMANCE \
                       --enable PCIE_BUS_PERFORMANCE
  fi

    if [ "$_tickrate" = "perodic" ]; then
        echo "Enabling periodic ticks..."
        scripts/config --disable NO_HZ_IDLE \
                      --disable NO_HZ_FULL \
                      --disable NO_HZ \
                      --disable NO_HZ_COMMON \
                      --enable HZ_PERIODIC
    elif [ "$_tickrate" = "idle" ]; then
        echo "Enabling tickless idle..."
        scripts/config --disable HZ_PERIODIC \
                       --disable NO_HZ_FULL \
                       --enable NO_HZ_IDLE \
                       --enable NO_HZ \
                       --enable NO_HZ_COMMON
    elif [ "$_tickrate" = "full" ]; then
        echo "Enabling tickless idle..."
        scripts/config --disable HZ_PERIODIC \
                       --disable NO_HZ_IDLE \
                       --disable CONTEXT_TRACKING_FORCE \
                       --enable NO_HZ_FULL_NODEF \
                       --enable NO_HZ_FULL \
                       --enable NO_HZ \
                       --enable NO_HZ_COMMON \
                       --enable CONTEXT_TRACKING
    fi

    if [ "$_preempt" = "full" ]; then
        echo "Enabling low latency preempt..."
        scripts/config --enable PREEMPT_BUILD \
                      --disable PREEMPT_NONE \
                      --disable PREEMPT_VOLUNTARY \
                      --enable PREEMPT \
                      --enable PREEMPT_COUNT \
                      --enable PREEMPTION \
                      --enable PREEMPT_DYNAMIC
    elif [ "$_preempt" = "voluntary" ]; then
        echo "Enabling tickless idle..."
        scripts/config --enable PREEMPT_BUILD \
                      --disable PREEMPT_NONE \
                      --enable PREEMPT_VOLUNTARY \
                      --disable PREEMPT \
                      --enable PREEMPT_COUNT \
                      --enable PREEMPTION \
                      --enable PREEMPT_DYNAMIC
    elif [ "$_tickrate" = "server" ]; then
        echo "Enabling tickless idle..."
        scripts/config --enable PREEMPT_NONE_BUILD \
                       --enable PREEMPT_NONE \
                       --disable PREEMPT_VOLUNTARY \
                       --disable PREEMPT \
                       --disable PREEMPT_COUNT \
                       --disable PREEMPTION \
                       --disable PREEMPT_DYNAMIC
    fi

    if [ -n "$_tcp_bbr2" ]; then
        echo "Disabling TCP_CONG_CUBIC..."
        scripts/config --module TCP_CONG_CUBIC \
                       --disable DEFAULT_CUBIC \
                       --enable TCP_CONG_BBR2 \
                       --enable DEFAULT_BBR2 \
                       --set-str DEFAULT_TCP_CONG bbr2
    fi

    if [ -n "$_nf_cone" ]; then
        echo "Enabling FULLCONENAT..."
        scripts/config --module IP_NF_TARGET_FULLCONENAT \
                       --module NETFILTER_XT_TARGET_FULLCONENAT
    fi

    if [ -n "$_spf_enable" ]; then
        echo "Enabling SPECULATIVE_PAGE_FAULT LRU..."
        scripts/config --enable SPECULATIVE_PAGE_FAULT
    fi

    if [ -n "$_lru_enable" ]; then
        echo "Enabling multigenerational LRU..."
        scripts/config --enable ARCH_HAS_NONLEAF_PMD_YOUNG \
                       --enable LRU_GEN \
                       --enable LRU_GEN_ENABLED \
                       --disable LRU_GEN_STATS
    fi

#    if [ -n "$_damon" ]; then
#        echo "Enabling DAMON..."
#        scripts/config --enable DAMON \
#                       --disable DAMON_VADDR \
#                       --disable DAMON_DBGFS \
#                       --enable DAMON_PADDR \
#                       --enable DAMON_RECLAIM
#    fi

    if [ -n "$_lrng_enable" ]; then
        echo "Enabling Linux Random Number Generator ..."
        scripts/config --disable RANDOM_DEFAULT_IMPL \
                        --enable LRNG \
                        --enable LRNG_OVERSAMPLE_ENTROPY_SOURCES \
                        --set-val LRNG_OVERSAMPLE_ES_BITS 64 \
                        --set-val LRNG_SEED_BUFFER_INIT_ADD_BITS 128 \
                        --enable LRNG_IRQ \
                        --enable LRNG_CONTINUOUS_COMPRESSION_ENABLED \
                        --disable LRNG_CONTINUOUS_COMPRESSION_DISABLED \
                        --enable LRNG_ENABLE_CONTINUOUS_COMPRESSION \
                        --enable LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION \
                        --disable LRNG_COLLECTION_SIZE_512 \
                        --enable LRNG_COLLECTION_SIZE_1024 \
                        --disable LRNG_COLLECTION_SIZE_2048 \
                        --disable LRNG_COLLECTION_SIZE_4096 \
                        --disable LRNG_COLLECTION_SIZE_8192 \
                        --set-val LRNG_COLLECTION_SIZE 1024 \
                        --enable LRNG_HEALTH_TESTS \
                        --set-val LRNG_RCT_CUTOFF 31 \
                        --set-val LRNG_APT_CUTOFF 325 \
                        --set-val LRNG_IRQ_ENTROPY_RATE 256 \
                        --enable LRNG_JENT \
                        --set-val LRNG_JENT_ENTROPY_RATE 16 \
                        --enable LRNG_CPU \
                        --set-val LRNG_CPU_ENTROPY_RATE 8 \
                        --enable LRNG_DRNG_SWITCH \
                        --enable LRNG_KCAPI_HASH \
                        --module LRNG_DRBG \
                        --module LRNG_KCAPI \
                        --enable LRNG_TESTING_MENU \
                        --disable LRNG_RAW_HIRES_ENTROPY \
                        --disable LRNG_RAW_JIFFIES_ENTROPY \
                        --disable LRNG_RAW_IRQ_ENTROPY \
                        --disable LRNG_RAW_IRQFLAGS_ENTROPY \
                        --disable LRNG_RAW_RETIP_ENTROPY \
                        --disable LRNG_RAW_REGS_ENTROPY \
                        --disable LRNG_RAW_ARRAY \
                        --disable LRNG_IRQ_PERF \
                        --disable LRNG_ACVT_HASH \
                        --enable LRNG_RUNTIME_ES_CONFIG \
                        --disable LRNG_RUNTIME_MAX_WO_RESEED_CONFIG \
                        --disable LRNG_TEST_CPU_ES_COMPRESSION \
                        --enable LRNG_SELFTEST \
                        --disable LRNG_SELFTEST_PANIC
    fi

    if [ -n "$_zstd_swap_compression" ]; then
        echo "Enabling zram ZSTD compression..."
        scripts/config --disable ZRAM_DEF_COMP_LZORLE \
                       --enable ZRAM_DEF_COMP_ZSTD \
                       --set-str ZRAM_DEF_COMP zstd \
                       --disable ZSWAP_COMPRESSOR_DEFAULT_LZ4 \
                       --enable ZSWAP_COMPRESSOR_DEFAULT_ZSTD \
                       --set-str ZSWAP_COMPRESSOR_DEFAULT zstd
    fi

    if [ -n "$_disable_debug" ]; then
    scripts/config --disable DEBUG_INFO \
                       --disable DEBUG_INFO_BTF \
                       --disable DEBUG_INFO_DWARF4 \
                       --disable DEBUG_INFO_DWARF5 \
                       --disable PAHOLE_HAS_SPLIT_BTF \
                       --disable DEBUG_INFO_BTF_MODULES \
                       --disable SLUB_DEBUG \
                       --disable PM_DEBUG \
                       --disable PM_ADVANCED_DEBUG \
                       --disable PM_SLEEP_DEBUG \
                       --disable ACPI_DEBUG \
                       --disable SCHED_DEBUG \
                       --disable LATENCYTOP \
                       --disable DEBUG_PREEMPT
    fi

    echo "Enable ZRAM_ENTROPY"
	  scripts/config --enable ZRAM_ENTROPY
    echo "Enable USER_NS_UNPRIVILEGED"
    scripts/config --enable USER_NS
    echo "Enable WINE FASTSYNC"
    scripts/config --enable WINESYNC

    ### Optionally use running kernel's config
    # code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
    if [ -n "$_use_current" ]; then
        if [[ -s /proc/config.gz ]]; then
            echo "Extracting config from /proc/config.gz..."
            # modprobe configs
            zcat /proc/config.gz > ./.config
        else
            warning "Your kernel was not compiled with IKPROC!"
            warning "You cannot read the current config!"
            warning "Aborting!"
            exit
        fi
    fi


#    ### Optionally load needed modules for the make localmodconfig
#    # See https://aur.archlinux.org/packages/modprobed-db
#    if [ -n "$_localmodcfg" ]; then
#        if [ -e $HOME/.config/modprobed.db ]; then
#            echo "Running Steven Rostedt's make localmodconfig now"
#            make ${BUILD_FLAGS[*]} LSMOD=$HOME/.config/modprobed.db localmodconfig
#        else
#            echo "No modprobed.db data found"
#            exit
#        fi
#    fi

    echo "Applying default config..."
    make ${BUILD_FLAGS[*]}  olddefconfig
    make ${BUILD_FLAGS[*]} -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
    [[ -z "$_makemenuonfig" ]] || make ${BUILD_FLAGS[*]} menuconfig

    ### Save configuration for later reuse
    cp -Tf ./.config "${startdir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

}

build() {
    cd ${_srcname}
    make ${BUILD_FLAGS[*]} -j$(nproc) all
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=('coreutils' 'kmod' 'initramfs')
    optdepends=('crda: to set the correct wireless channels of your country'
        'linux-firmware: firmware images needed for some devices'
    'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig')
    provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE)

    cd ${srcdir}/$_srcname

    local kernver="$(<version)"
    local modulesdir="$pkgdir/usr/lib/modules/$kernver"

    echo "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

    echo "Installing modules..."
    make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
        DEPMOD=/doesnt/exist  modules_install  # Suppress depmod

    # remove build and source links
    rm "$modulesdir"/{source,build}
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
    depends=(pahole)

    cd ${_srcname}
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    echo "Installing build files..."
    install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
        localversion.* version vmlinux
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts

    # required when STACK_VALIDATION is enabled
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

#    # required when DEBUG_INFO_BTF_MODULES is enabled
#    if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
#        install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
#    fi

    echo "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    echo "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    echo "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    echo "Removing documentation..."
    rm -r "$builddir/Documentation"

    echo "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    echo "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    echo "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -bi "$file")" in
            application/x-sharedlib\;*)      # Libraries (.so)
                strip -v $STRIP_SHARED "$file" ;;
            application/x-archive\;*)        # Libraries (.a)
                strip -v $STRIP_STATIC "$file" ;;
            application/x-executable\;*)     # Binaries
                strip -v $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) # Relocatable binaries
                strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    echo "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
    }"
done

sha256sums=('98001d91f5bb1d29ad9489c71a6a75950c2610027e9eb0c513379b8f6d44df38'
            '171c16a2f3ac505a467c0619761ba3cea9b9867fa655125c41c51915c83a1223'
            '9abdc6c5f40b81c044f5549e8f29d474dc51e2765ee2b5e9a5fba9e62499dd9e'
            '65ec9ac5b8b28d5b61df1c72498059be2e7cb1f9b965bac0e4ffed3c05520b2b'
            '8d4a22387dbe7a9f339555c99bd70c55c033422026244b98cbfd93eb39fb99c2'
            'd6df293139a7a04720b74832a726ebcf733f467b3af051570c6ba0c602d1fa8e'
            'f8769d0090df6cf9b89dd6b7874697629fde5b8a1aac0a59f007d0cfa0f2b24c'
            '35a7cde86fb94939c0f25a62b8c47f3de0dbd3c65f876f460b263181b3e92fc0'
            '32743ebee0034e83f8695e992c3321ba35237f189f72657e5f36ded5bcf392c6'
            '268e2defebfb538b5f996cbf99c6cd263597be92e0a8c91c93f448475d743a6b'
            'f6383abef027fd9a430fd33415355e0df492cdc3c90e9938bf2d98f4f63b32e6'
            '5c2a0c96dfa0909f1def1bf9ef0ad9b7e1b90263ca751a2cbd0956d009f0f7cb'
            'e3c106cfac323c6f677b698b080b48798ea63786a7153f81d9a21f749e73168d'
            '4f715ec191c760ede34963ea449c2f12cd58813cd0fa3a684297ab0f45c6ff49'
            '8e5edc5ae5282fae35684006f0aeea41c16523dc0482891dc6c15e40e87f6a53'
            '36928ee323a84d8eb75460619b8e2b6493ea6e03f438c0820f73aa79a58cf9b2'
            '05616703ad898f967b7055bdc6dc6c5aab33257005c2ef9d87d55af15c12927b'
            '925b3edafe5aae0e577a5a51f653ef0a93d4299c44e9dcba13882010d4bc58ee'
            '5b1a8092837cd06a57becbe8cace02c7da445761e0e6d53ea25d9f966b57ab3b'
            '815a609564ede2009837ff09843d89e4735467bd2a14fd89a610e14cb73f2587'
            '9c2dee249ba6fd79eb8d8142a4591e6a64d88d44d2bf49d486499f70c31b5bf3'
            '53bc1fc5f0c44072222c67ce5fa53a729643d5269d391b742bab1834bfe4d313'
            '2b0897c7ce14feef108c856abed79de52a761a3001f9c835e1f857d1ff275ae3'
            'ab460430430dca2f87aff6dfc66f20956002faad6f95110059a765632ddbc2d4'
            '91aa3623410e9228034f2272d4a55dc0a1f4291677daeeedc7007deef4a1575a'
            'e22faa7811a3de10affe5f7e6d671f263599c75f9f78cca6e3cdf7a9e36d71de'
            'ba640b93b7d4bce58b15ad2232f0547007b725c2f518a8b19902d45632da0a47'
            '73fcdd0c088067872d3d452e4505b05496f6c23cc2cd1b68333acc2897c56954'
            '6f9c0fd8f6827051a685a703a53bb79c578af00373431a41408bb4b7d90152d2'
            '5595da97f297de0dc832d1f12254cb5d05c555ef6e2a113e38821dea8b37acca'
            '8373f42c0d3e349983c486ee3ab78de7f2f71f225ee761cdf08f7e54e8430657'
            '9837738ff7721de537ddc7bac33f7e9da90d545913b08a0d58d7d4271b2f287a'
            '153935699c4f15434c06582a64054660f55eaee9d5c70b277442b5156ccdfb15'
            '896a3917af981bfc18a39775e5a88ce500a4b6968434b2a925f895340f7e25fb')

