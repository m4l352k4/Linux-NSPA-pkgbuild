# Maintainer: Jordan Johnston <johnstonljordan@gmail.com>
# Contributor: Peter Jung ptr1337 <admin@ptr1337.dev>
# Contributor: Piotr Gorski <lucjan.lucjanov@gmail.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

### Tweak kernel options prior to a build via nconfig
_makemenuconfig=

# Compile ONLY used modules to VASTLY reduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

# Use the current kernel's .config file
# Enabling this option will use the .config of the RUNNING kernel rather than
# the ARCH defaults. Useful when the package gets updated and you already went
# through the trouble of customizing your config options.  NOT recommended when
# a new kernel is released, but again, convenient for package bumps.
_use_current=

# Microsoft Surface 7 specific config
# unset =y to use generic kernel config (builds everything)
_config_Surface7=y

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
# See, https://bugs.archlinux.org/task/31187
_NUMAdisable=y

# Disable MQ-Deadline I/O scheduler
_mq_deadline_disable=y

# Disable Kyber I/O scheduler
_kyber_disable=y

# Enable multigenerational LRU
_lru_enable=y

## Enable DAMON
_damon=

# enable SPECULATIVE_PAGE_FAULT
_spf_enable=y

# Enable Linux Random Number Generator
_lrng_enable=

# Apply Kernel automatic Optimization
_use_auto_optimization=y

# disable debug to lower the size of the kernel
_disable_debug=

# Enable zram/zswap ZSTD compression
_zstd_compression=y

# Enable NetFilter Full Cone Nat
_nf_cone=y

# Enable No HZ Full
_tickrate=full

# VMX hack: Set VMX enabled, even if disabled in the BIOS.  Microsoft
# disables VMX on my Micosft-Suface 7 BIOS (and it can't be enabled!). Skip
# check in Linux, enable it with MSR.
#
# Additionally, trick the kernel into thinking Ice Lake CPUs aren't affected
# by iTLB Multihit vulnerability (Add to whitelisted CPUs). As I am only
# using trusted VMs - I'm not overly worried about this vulnerability.
#
# !!! WARNING: Do NOT enable this: may have your system !!!
_vmx_hack=

# Disable RT Throttling (!!! DANGER ZONE !!!)
# Don't enable unless you know what you are doing.
_no_RT_throttle=

# Enable converting sched_feat() into compile-time implementation
# This allows the compiler to make better optimizations to scheduler
# code. This only supports my config.
#
# I can't possibly test all configs, and I am explicit in a few spots of
# the sched code, where I have a feature enabled, or disabled. That said,
# assuming none of the sched options or preemption model are messed with
# and the config is close to mine: it probably will work fine. WIP!
_sched_feat_comp=y

 pkgbase=linux-nspa
_major=6.10
_minor=0
#_minorc=$((_minor+1))
#_rcver=rc8
pkgver=${_major}
_stable=${_major}.${_minor}
#_stable=${_major}
#_stablerc=${_major}-${_rcver}
#_srcname=linux-${_stable}
_srcname=linux-6.10-rc6
arch=(x86_64 x86_64_v3)
pkgdesc='Linux-NSPA: PREEMPT_RT_FULL kernel with a twist'
pkgrel=17
arch=('x86_64' 'x86_64_v3')
url="https://github.com/nine7nine/Linux-NSPA"
license=('GPL2')
options=('!strip')
makedepends=('bc' 'texlive-latexextra' 'libelf' 'pahole' 'cpio' 'perl' 'tar' 'xz' 'zstd' 'xmlto' 'git' 'gcc' 'gcc-libs' 'glibc' 'binutils' 'make' 'patch')
source=(
  "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-6.10-rc6.tar.gz"
  "0000-patch-6.10-rc5-rt9.patch"
  "config"
  "config_surface7"
  "auto-cpu-optimization.sh"
  "0000-more-uarches-for-kernel-6.8+.patch"
  "0001-ClearLinux-patchwork.patch"
  "0002-sched-fair-Compile-out-NUMA-code-entirely-when-NUMA-.patch"
  "0003-x86-Enable-fast-strings-on-Intel-if-BIOS-hasn-t-alre.patch"
  "0006-background_reclaim_of_hugepages.patch"
  "0007-Reduce-SCHED_RR-timeslice-100-ms-10-jiffy.patch"
  "0008-mm-increase_max_map_count.patch"
  "0009-mm-le9uo-add-sysctl-knobs-for-protecting-the-workin.patch"
  "0011-kt-smp-migrate_disable_in_smp_call_function_single_async.patch"
  "0012-kt-rtmutex-no-rcu-lock-while-spinning.patch"
  "0022-kt-vm-mm_optimizations.patch"
  "0019-hid-wacom-Silence_log_spam.patch"
  "0024-Kernel_tuning-CONFIG_NSPA.patch"
  "0030-Microsoft_Surface_Support-6.8.patch"
  "0041-sched-fair-Dont_force_smt_balancing_when_CPU_has_spare.patch"
  "0120-Softirq-Fix_lock_imbalance_in_local_bh.patch"
  "0102-Sched-Improve_rq_selection_for_blocked_task_when_affinity_changes.patch"
  "0202-sched-fair-Always_update_CPU_capacity_when_load_balancing.patch"
  "0999-cpu-Force-Enable-VMX-hack.patch"
  "1000-sched-core-devel.patch"
  "1001-sched-eevdf-devel.patch"
  "0101-sched-Fair-DL-server_V7.patch"
  "0201-sched-rt-Disable_RT_throttling-CFS-DL_Servers.patch"
  "1101-sched-fair-Reduce_PELT_half-life_from_32ms_to_16ms.patch"
  "1102-misc-Avoid_Dynamic_Mem_Allocations.patch"
  "1103-drm-Convert_CPU-invariant_uninterruptible_waits_to_TASK_IDLE.patch"
  "1104-Workqueue-Fix_divide_error-in-wq_update_node_max_active.patch"
  "1107-block-set_rq_affinity_to_force_full.patch"
  "1108-Add_sysctl_and_CONFIG_to_disallow_unprivileged.patch"
  "1110-add-acs-overrides_iommu.patch"
  "1112-sched-core-Skip_Superfluous_acquire_barrier_in_ttwu.patch"
  "1113-mm-lru-misc_optimizations.patch"
  "1116-Support_s2idle-s2ram_on_PREEMPT_RT.patch"
  "1116-kt-pm-suspend_patches.patch"
  "1120-RFC-Introduce-QPW-for-per-cpu-operations.patch"
  "9999-sched_feat-compile-time.patch"
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {

  cd ${srcdir}/$_srcname

  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"

    if [[ $src == "0999-cpu-Force-Enable-VMX-hack.patch" && $_vmx_hack == "y" ]]; then
      echo "Applying patch $src..."
      patch -Np1 < "../$src"
    elif [[ $src == "201-sched-rt-Disable_RT_throttling-CFS-DL_Servers.patch" && $_no_RT_throttle == "y" ]]; then
      echo "Applying patch $src..."
      patch -Np1 < "../$src"
    elif [[ $src == "9999-sched_feat-compile-time.patch" && $_sched_feat_comp == "y" ]]; then
      echo "Applying patch $src..."
      patch -Np1 < "../$src"
    elif [[ $src == *.patch ]]; then
      # Apply other patches if they are present
      echo "Applying patch $src..."
      patch -Np1 < "../$src"
    fi
  done

  echo "Setting config..."

  if [ -n "$_config_Surface7" ]; then
      cp ../config_surface7 .config
  else
      cp ../config .config
  fi

    if [ -n "$_use_auto_optimization" ]; then
        "${srcdir}"/auto-cpu-optimization.sh
    fi

    if [ -n "$_NUMAdisable" ]; then
        echo "Disabling NUMA from kernel config..."
        scripts/config --disable NUMA \
                       --disable AMD_NUMA \
                       --disable X86_64_ACPI_NUMA \
                       --disable NODES_SPAN_OTHER_NODES \
                       --disable NUMA_EMU \
                       --disable NEED_MULTIPLE_NODES \
                       --disable USE_PERCPU_NUMA_NODE_ID \
                       --disable ACPI_NUMA \
                       --disable ARCH_SUPPORTS_NUMA_BALANCING \
                       --disable NODES_SHIFT \
                       --undefine NODES_SHIFT \
                       --disable NEED_MULTIPLE_NODES
    fi

    if [ -n "$_mq_deadline_disable" ]; then
        echo "Disabling MQ-Deadline I/O scheduler..."
        scripts/config --disable MQ_IOSCHED_DEADLINE
    fi

    if [ -n "$_kyber_disable" ]; then
        echo "Disabling Kyber I/O scheduler..."
        scripts/config --disable MQ_IOSCHED_KYBER
    fi

    if [ "$_tickrate" = "perodic" ]; then
        echo "Enabling periodic ticks..."
        scripts/config --disable NO_HZ_IDLE \
                      --disable NO_HZ_FULL \
                      --disable NO_HZ \
                      --disable NO_HZ_COMMON \
                      --enable HZ_PERIODIC
    elif [ "$_tickrate" = "idle" ]; then
        echo "Enabling tickless idle..."
        scripts/config --disable HZ_PERIODIC \
                       --disable NO_HZ_FULL \
                       --enable NO_HZ_IDLE \
                       --enable NO_HZ \
                       --enable NO_HZ_COMMON
    elif [ "$_tickrate" = "full" ]; then
        echo "Enabling tickless idle..."
        scripts/config --disable HZ_PERIODIC \
                       --disable NO_HZ_IDLE \
                       --disable CONTEXT_TRACKING_FORCE \
                       --enable NO_HZ_FULL_NODEF \
                       --enable NO_HZ_FULL \
                       --enable NO_HZ \
                       --enable NO_HZ_COMMON \
                       --enable CONTEXT_TRACKING
    fi

    if [ -n "$_nf_cone" ]; then
        echo "Enabling FULLCONENAT..."
        scripts/config --module IP_NF_TARGET_FULLCONENAT \
                       --module NETFILTER_XT_TARGET_FULLCONENAT
    fi

    if [ -n "$_spf_enable" ]; then
        echo "Enabling SPECULATIVE_PAGE_FAULT LRU..."
        scripts/config --enable SPECULATIVE_PAGE_FAULT
    fi

    if [ -n "$_lru_enable" ]; then
        echo "Enabling multigenerational LRU..."
        scripts/config --enable ARCH_HAS_NONLEAF_PMD_YOUNG \
                       --enable LRU_GEN \
                       --enable LRU_GEN_ENABLED \
                       --disable LRU_GEN_STATS
    fi

#    if [ -n "$_damon" ]; then
#        echo "Enabling DAMON..."
#        scripts/config --enable DAMON \
#                       --disable DAMON_VADDR \
#                       --disable DAMON_DBGFS \
#                       --enable DAMON_PADDR \
#                       --enable DAMON_RECLAIM
#    fi

    if [ -n "$_lrng_enable" ]; then
        echo "Enabling Linux Random Number Generator ..."
        scripts/config --disable RANDOM_DEFAULT_IMPL \
                        --enable LRNG \
                        --enable LRNG_OVERSAMPLE_ENTROPY_SOURCES \
                        --set-val LRNG_OVERSAMPLE_ES_BITS 64 \
                        --set-val LRNG_SEED_BUFFER_INIT_ADD_BITS 128 \
                        --enable LRNG_IRQ \
                        --enable LRNG_CONTINUOUS_COMPRESSION_ENABLED \
                        --disable LRNG_CONTINUOUS_COMPRESSION_DISABLED \
                        --enable LRNG_ENABLE_CONTINUOUS_COMPRESSION \
                        --enable LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION \
                        --disable LRNG_COLLECTION_SIZE_512 \
                        --enable LRNG_COLLECTION_SIZE_1024 \
                        --disable LRNG_COLLECTION_SIZE_2048 \
                        --disable LRNG_COLLECTION_SIZE_4096 \
                        --disable LRNG_COLLECTION_SIZE_8192 \
                        --set-val LRNG_COLLECTION_SIZE 1024 \
                        --enable LRNG_HEALTH_TESTS \
                        --set-val LRNG_RCT_CUTOFF 31 \
                        --set-val LRNG_APT_CUTOFF 325 \
                        --set-val LRNG_IRQ_ENTROPY_RATE 256 \
                        --enable LRNG_JENT \
                        --set-val LRNG_JENT_ENTROPY_RATE 16 \
                        --enable LRNG_CPU \
                        --set-val LRNG_CPU_ENTROPY_RATE 8 \
                        --enable LRNG_DRNG_SWITCH \
                        --enable LRNG_KCAPI_HASH \
                        --module LRNG_DRBG \
                        --module LRNG_KCAPI \
                        --enable LRNG_TESTING_MENU \
                        --disable LRNG_RAW_HIRES_ENTROPY \
                        --disable LRNG_RAW_JIFFIES_ENTROPY \
                        --disable LRNG_RAW_IRQ_ENTROPY \
                        --disable LRNG_RAW_IRQFLAGS_ENTROPY \
                        --disable LRNG_RAW_RETIP_ENTROPY \
                        --disable LRNG_RAW_REGS_ENTROPY \
                        --disable LRNG_RAW_ARRAY \
                        --disable LRNG_IRQ_PERF \
                        --disable LRNG_ACVT_HASH \
                        --enable LRNG_RUNTIME_ES_CONFIG \
                        --disable LRNG_RUNTIME_MAX_WO_RESEED_CONFIG \
                        --disable LRNG_TEST_CPU_ES_COMPRESSION \
                        --enable LRNG_SELFTEST \
                        --disable LRNG_SELFTEST_PANIC
    fi

    if [ -n "$_disable_debug" ]; then
    scripts/config --disable DEBUG_INFO \
                       --disable DEBUG_INFO_BTF \
                       --disable DEBUG_INFO_DWARF4 \
                       --disable DEBUG_INFO_DWARF5 \
                       --disable PAHOLE_HAS_SPLIT_BTF \
                       --disable DEBUG_INFO_BTF_MODULES \
                       --disable SLUB_DEBUG \
                       --disable PM_DEBUG \
                       --disable PM_ADVANCED_DEBUG \
                       --disable PM_SLEEP_DEBUG \
                       --disable ACPI_DEBUG \
                       --disable SCHED_DEBUG \
                       --disable LATENCYTOP \
                       --disable DEBUG_PREEMPT
    fi

    ### Optionally use running kernel's config
    # code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
    if [ -n "$_use_current" ]; then
        if [[ -s /proc/config.gz ]]; then
            echo "Extracting config from /proc/config.gz..."
            # modprobe configs
            zcat /proc/config.gz > ./.config
        else
            warning "Your kernel was not compiled with IKPROC!"
            warning "You cannot read the current config!"
            warning "Aborting!"
            exit
        fi
    fi

    ### Optionally load needed modules for the make localmodconfig
    # See https://aur.archlinux.org/packages/modprobed-db
    if [ -n "$_localmodcfg" ]; then
        if [ -e $HOME/.config/modprobed.db ]; then
            echo "Running Steven Rostedt's make localmodconfig now"
            make ${BUILD_FLAGS[*]} LSMOD=$HOME/.config/modprobed.db localmodconfig
        else
            echo "No modprobed.db data found"
            exit
        fi
    fi

    echo "Applying default config..."
    make ${BUILD_FLAGS[*]}  olddefconfig
    make ${BUILD_FLAGS[*]} -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
    [[ -z "$_makemenuonfig" ]] || make ${BUILD_FLAGS[*]} menuconfig

    ### Save configuration for later reuse
    cp -Tf ./.config "${startdir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

}

build() {
  cd ${_srcname}
  make ${BUILD_FLAGS[*]} -j3 all
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=('coreutils' 'kmod' 'initramfs')
    optdepends=('crda: to set the correct wireless channels of your country'
        'linux-firmware: firmware images needed for some devices'
    'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig')
    provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE)

  cd ${srcdir}/$_srcname

  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  rm -f "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd ${_srcname}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

sha256sums=('0c62fe9205bd49d396c4dd75a1e203811fc2ff68ad03927d2f7d2d40cf40925e'
            'effa7a001459a379bc08d8db2434a5d9bf59e72353bfb334084dcd159b34fbdc'
            '25621655394cadbbac7d47078ae452a92559fbbccf32be8462a53f55c5cbdecf'
            '9124374c14025929d9c232f038cda51a41e9bea21dcd4d0b181cfea18996dd88'
            'e1d45b5842079a5f0f53d7ea2d66ffa3f1497766f3ccffcf13ed00f1ac67f95e'
            '458d5a74cdaf1de427ad18038e310ba328f7be47ce8caed017a5ccda566b79d9'
            'eff62970ee3636da157ad868d63f33b891df5114ce25e12319e7b28bf8fc2a29'
            '5c2a0c96dfa0909f1def1bf9ef0ad9b7e1b90263ca751a2cbd0956d009f0f7cb'
            'e3c106cfac323c6f677b698b080b48798ea63786a7153f81d9a21f749e73168d'
            '36928ee323a84d8eb75460619b8e2b6493ea6e03f438c0820f73aa79a58cf9b2'
            '05616703ad898f967b7055bdc6dc6c5aab33257005c2ef9d87d55af15c12927b'
            '925b3edafe5aae0e577a5a51f653ef0a93d4299c44e9dcba13882010d4bc58ee'
            '2869b0de2899a50903598bedc5ddb8f699516ed35da5e349342632feb5fc5b7a'
            '9c2dee249ba6fd79eb8d8142a4591e6a64d88d44d2bf49d486499f70c31b5bf3'
            '53bc1fc5f0c44072222c67ce5fa53a729643d5269d391b742bab1834bfe4d313'
            '5296f32319a13f532e285ea7a814530ff3a2976f0b90d7167350bfd5f15e9286'
            '59b410a6cbe6a33c91f54139e4a710fbd2dc29e771d60d49b7ec715d3d7e12fe'
            '015690390c7aaf64ad7794bc458cc191d6b2b0be6e18b62ae65855a57fb46bea'
            'dfe193c5f6ee4edf806ad80a9935f4763f3b49da7b1d0804245cc3a4a0e8ecc3'
            'd670d04c03e41f3dbc0ec9c49e50ba2231f610d8d34cb46e341baef3a8002a27'
            '57fb1f13bc4cedf471523e0b043962971caa4db107d6e83a527056103ebaf9dc'
            '299caa16bc960c3907e9513354e04f1f7683e4cb4972882ec5e92652f42a7070'
            '82427ed401357b5dbc4d095db2abc12d003501da31d49b2acd0c7899def50b2b'
            '88620fb4c05734f0da4e2ea7098d40ff8bdafe2485ab449085da769550ae18b6'
            '35de81b5581ac4ad38980cf578f6aa4d036e6d60c4f9195f1b7570be33fda583'
            'a2756bd85de0f09fc0e805ce4c7015790c01a0a81be14899b7fa4b69536d594c'
            '5a8ef40c3e9855991d37c3e7fdbc74a769288241150c028a9eca39fa77a62536'
            '3a776118280a9f28d7f779d86b9a0328673ba4efb558ca4b7a47288a19b96546'
            '4352a282b865b2ee50b70d3d2537661dedc9617463cd3e61ddc52e12bb8b53ac'
            'db5b0d3d82736e8acd9289e7728af3845244c32ff7a8d2e4151e1efbe89f0c09'
            '79c6dcbf04c30c7edd21beaab80090fb7d00feddc5396e713617463879c65a8e'
            'a7776f80359426e1add5c3d2895953e7fd970aedb162e639b2df16d7a70fcb23'
            'a1f803ab71c0b18ffa845a7bfd1ee90d2b2f2ec656cf9bedf0a2db2a2c2869a3'
            '8d4570520b9e7259c788e60e8e6d7c58c58bb5c5a99e46f03d13a23515491a18'
            'f3e6c8c98ea5172f424971bc20f128c7f1f6416af6944f58dad1048ba4dff168'
            'a07a110ec5bf4ebcfa1fa04e446ca00145caf72cc3d28d3f5937361f1b4e2e11'
            'c6c2b07ba61d624a3e2b351dc5d3d914183bdecb61fa975486f64b046f88a55e'
            '75a79812c1b7c700fba495cb23b7abf8a043a940eaede0560e5b3efc9060704a'
            '6d5a98e630c2981fbab73b895dab34fd727b4113b3c5a6c3a6c00b8ef93a3ae1'
            '97a4cd25dcc07cd260d9f410e80d869a376d019affa288fa1b37f15963fe0bd9'
            'fd2843e5d1e12cb5a4279417b04a5c88af17335affd0998bed858109ce3e2227')
