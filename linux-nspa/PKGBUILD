# Maintainer: Jordan Johnston <johnstonljordan@gmail.com>
# Contributor: Peter Jung ptr1337 <admin@ptr1337.dev>
# Contributor: Piotr Gorski <lucjan.lucjanov@gmail.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

### Tweak kernel options prior to a build via nconfig
_makemenuconfig=

# Compile ONLY used modules to VASTLY reduce the number of modules built
# and the build time.
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

# Use the current kernel's .config file
_use_current=

# Microsoft Surface 7 specific config
# unset =y to use generic kernel config (builds everything)
_config_Surface7=

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
_NUMAdisable=y

# Disable MQ-Deadline I/O scheduler
_mq_deadline_disable=y

# Disable Kyber I/O scheduler
_kyber_disable=y

# Enable multigenerational LRU
_lru_enable=y

## Enable DAMON
_damon=

# enable SPECULATIVE_PAGE_FAULT
_spf_enable=y

# Enable Linux Random Number Generator
_lrng_enable=

# disable debug to lower the size of the kernel
_disable_debug=

# Enable zram/zswap ZSTD compression
_zstd_compression=y

# Enable NetFilter Full Cone Nat
_nf_cone=y

# Enable No HZ Full
_tickrate=full

# VMX hack: Set VMX enabled, even if disabled in the BIOS.  Microsoft
# disables VMX on my Micosft-Suface 7 BIOS (and it can't be enabled!). Skip
# check in Linux, enable it with MSR.
#
# Additionally, trick the kernel into thinking Ice Lake CPUs aren't affected
# by iTLB Multihit vulnerability (Add to whitelisted CPUs). As I am only
# using trusted VMs - I'm not overly worried about this vulnerability.
#
# !!! WARNING: Do NOT enable this: may have your system !!!
_vmx_hack=

# Disable RT Throttling (!!! DANGER ZONE !!!)
# Don't enable unless you know what you are doing.
_no_RT_throttle=

# Enable converting sched_feat() into compile-time implementation
# This allows the compiler to make better optimizations to scheduler
# code. This only supports my config.
_sched_feat_comp=y

 pkgbase=linux-nspa
_major=6.15
_minor=0
#_minorc=$((_minor+1))
#_rcver=rc8
pkgver=${_major}
_stable=${_major}.${_minor}
#_stable=${_major}
#_stablerc=${_major}-${_rcver}
#_srcname=linux-${_stable}
_srcname=linux-6.15-rc3
arch=(x86_64 x86_64_v3)
pkgdesc='Linux-NSPA: PREEMPT_RT_FULL kernel with a twist'
pkgrel=3
arch=('x86_64' 'x86_64_v3')
url="https://github.com/nine7nine/Linux-NSPA"
license=('GPL2')
options=('!strip')
makedepends=('bc' 'texlive-latexextra' 'libelf' 'pahole' 'cpio' 'perl' 'tar' 'xz' 'zstd' 'xmlto' 'git' 'gcc' 'gcc-libs' 'glibc' 'binutils' 'make' 'patch')
source=(
  "https://git.kernel.org/torvalds/t/linux-6.15-rc3.tar.gz"
  "0000-patch-6.15-rc1-rt1.patch"
  "config"
  "config_surface7"
  "0000-Add_the_CONFIG_X86_NATIVE_CPU_option.patch"
  "0001-ClearLinux-patchwork.patch"
  "0002-sched-fair-Compile-out-NUMA-code-entirely-when-NUMA-.patch"
  "0006-background_reclaim_of_hugepages.patch"
  "0007-Reduce-SCHED_RR-timeslice-100-ms-10-jiffy.patch"
  "0008-mm-increase_max_map_count.patch"
  "0009-mm-le9uo-add-sysctl-knobs-for-protecting-the-workin.patch"
  "0010-iosched-6.14-introduce_ADIOS_IO_scheduler.patch"
  "0011-kt-smp-migrate_disable_in_smp_call_function_single_async.patch"
  "0012-kt-rtmutex-no-rcu-lock-while-spinning.patch"
  "0022-kt-vm-mm_optimizations.patch"
  "0019-hid-wacom-Silence_log_spam.patch"
  "0024-Kernel_tuning-CONFIG_NSPA.patch"
  "0030-Microsoft_Surface_Support-6.12.patch"
  "0041-sched-fair-Dont_force_smt_balancing_when_CPU_has_spare.patch"
  "0102-Sched-Improve_rq_selection_for_blocked_task_when_affinity_changes.patch"
  "0202-sched-fair-Always_update_CPU_capacity_when_load_balancing.patch"
  "0999-cpu-Force-Enable-VMX-hack.patch"
  "0201-sched-rt-Disable_RT_throttling-CFS-DL_Servers.patch"
  "1101-sched-fair-Reduce_PELT_half-life_from_32ms_to_16ms.patch"
  "1102-misc-Avoid_Dynamic_Mem_Allocations.patch"
  "1103-drm-Convert_CPU-invariant_uninterruptible_waits_to_TASK_IDLE.patch"
  "1104-Workqueue-Fix_divide_error-in-wq_update_node_max_active.patch"
  "1108-Add_sysctl_and_CONFIG_to_disallow_unprivileged.patch"
  "1110-add-acs-overrides_iommu.patch"
  "1112-sched-core-Skip_Superfluous_acquire_barrier_in_ttwu.patch"
  "1116-kt-pm-suspend_patches.patch"
  "1119-mm-compaction-Skip_all_non-migratable_pages_during_scan.patch"
  "1120-RFC-Introduce-QPW-for-per-cpu-operations.patch"
  "1122-dma-buf-sync_file-Speed_up_ioctl_by_omitting_debug_names.patch"
  "1123-iwlwifi-mvm-allow_DTIM_periods_to_be_skipped.patch"
  "9999-sched_feat-compile-time.patch"
  "1130-sched-Introduce-Cache-aware-scheduling.patch"
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {

  cd ${srcdir}/$_srcname

  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"

    if [[ $src == "0999-cpu-Force-Enable-VMX-hack.patch" && $_vmx_hack == "y" ]]; then
      echo "Applying patch $src..."
      patch -Np1 < "../$src"
    elif [[ $src == "201-sched-rt-Disable_RT_throttling-CFS-DL_Servers.patch" && $_no_RT_throttle == "y" ]]; then
      echo "Applying patch $src..."
      patch -Np1 < "../$src"
    elif [[ $src == "9999-sched_feat-compile-time.patch" && $_sched_feat_comp == "y" ]]; then
      echo "Applying patch $src..."
      patch -Np1 < "../$src"
    elif [[ $src == *.patch ]]; then
      # Apply other patches if they are present
      echo "Applying patch $src..."
      patch -Np1 < "../$src"
    fi
  done

  echo "Setting config..."

  if [ -n "$_config_Surface7" ]; then
      cp ../config_surface7 .config
  else
      cp ../config .config
  fi

    if [ -n "$_NUMAdisable" ]; then
        echo "Disabling NUMA from kernel config..."
        scripts/config --disable NUMA \
                       --disable AMD_NUMA \
                       --disable X86_64_ACPI_NUMA \
                       --disable NODES_SPAN_OTHER_NODES \
                       --disable NUMA_EMU \
                       --disable NEED_MULTIPLE_NODES \
                       --disable USE_PERCPU_NUMA_NODE_ID \
                       --disable ACPI_NUMA \
                       --disable ARCH_SUPPORTS_NUMA_BALANCING \
                       --disable NODES_SHIFT \
                       --undefine NODES_SHIFT \
                       --disable NEED_MULTIPLE_NODES
    fi

    if [ -n "$_mq_deadline_disable" ]; then
        echo "Disabling MQ-Deadline I/O scheduler..."
        scripts/config --disable MQ_IOSCHED_DEADLINE
    fi

    if [ -n "$_kyber_disable" ]; then
        echo "Disabling Kyber I/O scheduler..."
        scripts/config --disable MQ_IOSCHED_KYBER
    fi

    if [ "$_tickrate" = "perodic" ]; then
        echo "Enabling periodic ticks..."
        scripts/config --disable NO_HZ_IDLE \
                      --disable NO_HZ_FULL \
                      --disable NO_HZ \
                      --disable NO_HZ_COMMON \
                      --enable HZ_PERIODIC
    elif [ "$_tickrate" = "idle" ]; then
        echo "Enabling tickless idle..."
        scripts/config --disable HZ_PERIODIC \
                       --disable NO_HZ_FULL \
                       --enable NO_HZ_IDLE \
                       --enable NO_HZ \
                       --enable NO_HZ_COMMON
    elif [ "$_tickrate" = "full" ]; then
        echo "Enabling tickless idle..."
        scripts/config --disable HZ_PERIODIC \
                       --disable NO_HZ_IDLE \
                       --disable CONTEXT_TRACKING_FORCE \
                       --enable NO_HZ_FULL_NODEF \
                       --enable NO_HZ_FULL \
                       --enable NO_HZ \
                       --enable NO_HZ_COMMON \
                       --enable CONTEXT_TRACKING
    fi

    if [ -n "$_nf_cone" ]; then
        echo "Enabling FULLCONENAT..."
        scripts/config --module IP_NF_TARGET_FULLCONENAT \
                       --module NETFILTER_XT_TARGET_FULLCONENAT
    fi

    if [ -n "$_spf_enable" ]; then
        echo "Enabling SPECULATIVE_PAGE_FAULT LRU..."
        scripts/config --enable SPECULATIVE_PAGE_FAULT
    fi

    if [ -n "$_lru_enable" ]; then
        echo "Enabling multigenerational LRU..."
        scripts/config --enable ARCH_HAS_NONLEAF_PMD_YOUNG \
                       --enable LRU_GEN \
                       --enable LRU_GEN_ENABLED \
                       --disable LRU_GEN_STATS
    fi

#    if [ -n "$_damon" ]; then
#        echo "Enabling DAMON..."
#        scripts/config --enable DAMON \
#                       --disable DAMON_VADDR \
#                       --disable DAMON_DBGFS \
#                       --enable DAMON_PADDR \
#                       --enable DAMON_RECLAIM
#    fi

    if [ -n "$_lrng_enable" ]; then
        echo "Enabling Linux Random Number Generator ..."
        scripts/config --disable RANDOM_DEFAULT_IMPL \
                        --enable LRNG \
                        --enable LRNG_OVERSAMPLE_ENTROPY_SOURCES \
                        --set-val LRNG_OVERSAMPLE_ES_BITS 64 \
                        --set-val LRNG_SEED_BUFFER_INIT_ADD_BITS 128 \
                        --enable LRNG_IRQ \
                        --enable LRNG_CONTINUOUS_COMPRESSION_ENABLED \
                        --disable LRNG_CONTINUOUS_COMPRESSION_DISABLED \
                        --enable LRNG_ENABLE_CONTINUOUS_COMPRESSION \
                        --enable LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION \
                        --disable LRNG_COLLECTION_SIZE_512 \
                        --enable LRNG_COLLECTION_SIZE_1024 \
                        --disable LRNG_COLLECTION_SIZE_2048 \
                        --disable LRNG_COLLECTION_SIZE_4096 \
                        --disable LRNG_COLLECTION_SIZE_8192 \
                        --set-val LRNG_COLLECTION_SIZE 1024 \
                        --enable LRNG_HEALTH_TESTS \
                        --set-val LRNG_RCT_CUTOFF 31 \
                        --set-val LRNG_APT_CUTOFF 325 \
                        --set-val LRNG_IRQ_ENTROPY_RATE 256 \
                        --enable LRNG_JENT \
                        --set-val LRNG_JENT_ENTROPY_RATE 16 \
                        --enable LRNG_CPU \
                        --set-val LRNG_CPU_ENTROPY_RATE 8 \
                        --enable LRNG_DRNG_SWITCH \
                        --enable LRNG_KCAPI_HASH \
                        --module LRNG_DRBG \
                        --module LRNG_KCAPI \
                        --enable LRNG_TESTING_MENU \
                        --disable LRNG_RAW_HIRES_ENTROPY \
                        --disable LRNG_RAW_JIFFIES_ENTROPY \
                        --disable LRNG_RAW_IRQ_ENTROPY \
                        --disable LRNG_RAW_IRQFLAGS_ENTROPY \
                        --disable LRNG_RAW_RETIP_ENTROPY \
                        --disable LRNG_RAW_REGS_ENTROPY \
                        --disable LRNG_RAW_ARRAY \
                        --disable LRNG_IRQ_PERF \
                        --disable LRNG_ACVT_HASH \
                        --enable LRNG_RUNTIME_ES_CONFIG \
                        --disable LRNG_RUNTIME_MAX_WO_RESEED_CONFIG \
                        --disable LRNG_TEST_CPU_ES_COMPRESSION \
                        --enable LRNG_SELFTEST \
                        --disable LRNG_SELFTEST_PANIC
    fi

    if [ -n "$_disable_debug" ]; then
    scripts/config --disable DEBUG_INFO \
                       --disable DEBUG_INFO_BTF \
                       --disable DEBUG_INFO_DWARF4 \
                       --disable DEBUG_INFO_DWARF5 \
                       --disable PAHOLE_HAS_SPLIT_BTF \
                       --disable DEBUG_INFO_BTF_MODULES \
                       --disable SLUB_DEBUG \
                       --disable PM_DEBUG \
                       --disable PM_ADVANCED_DEBUG \
                       --disable PM_SLEEP_DEBUG \
                       --disable ACPI_DEBUG \
                       --disable SCHED_DEBUG \
                       --disable LATENCYTOP \
                       --disable DEBUG_PREEMPT
    fi

    ### Optionally use running kernel's config
    # code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
    if [ -n "$_use_current" ]; then
        if [[ -s /proc/config.gz ]]; then
            echo "Extracting config from /proc/config.gz..."
            # modprobe configs
            zcat /proc/config.gz > ./.config
        else
            warning "Your kernel was not compiled with IKPROC!"
            warning "You cannot read the current config!"
            warning "Aborting!"
            exit
        fi
    fi

    ### Optionally load needed modules for the make localmodconfig
    # See https://aur.archlinux.org/packages/modprobed-db
    if [ -n "$_localmodcfg" ]; then
        if [ -e $HOME/.config/modprobed.db ]; then
            echo "Running Steven Rostedt's make localmodconfig now"
            make ${BUILD_FLAGS[*]} LSMOD=$HOME/.config/modprobed.db localmodconfig
        else
            echo "No modprobed.db data found"
            exit
        fi
    fi

    echo "Applying default config..."
    make ${BUILD_FLAGS[*]}  olddefconfig
    make ${BUILD_FLAGS[*]} -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
    [[ -z "$_makemenuonfig" ]] || make ${BUILD_FLAGS[*]} menuconfig

    ### Save configuration for later reuse
    cp -Tf ./.config "${startdir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

}

build() {
  cd ${_srcname}
  make ${BUILD_FLAGS[*]} -j$(nproc) all
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=('coreutils' 'kmod' 'initramfs')
    optdepends=('crda: to set the correct wireless channels of your country'
        'linux-firmware: firmware images needed for some devices'
    'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig')
    provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE)

  cd ${srcdir}/$_srcname

  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  rm -f "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd ${_srcname}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

sha256sums=('36da24c77bff72ec8b5df304ca92fb196cb93bc2a2030c07d2124905a35b2da2'
            '8149dd3d1e3aeed3d2a21b8e5b1668f262a9c397719d5852468334697e0f4982'
            '185b37e358eb56af27de5a46da7e800ab00a8f5ec31315406a90e78e83a426ae'
            '5be543c101bc83231fb1946142c6a6d659df204074b17ace649760b70ff6a301'
            '0e1259ee5e8481a84dd11408421d82ad419e17e2f84b146578ceb83a7427422f'
            'eff62970ee3636da157ad868d63f33b891df5114ce25e12319e7b28bf8fc2a29'
            '5c2a0c96dfa0909f1def1bf9ef0ad9b7e1b90263ca751a2cbd0956d009f0f7cb'
            '36928ee323a84d8eb75460619b8e2b6493ea6e03f438c0820f73aa79a58cf9b2'
            '05616703ad898f967b7055bdc6dc6c5aab33257005c2ef9d87d55af15c12927b'
            '925b3edafe5aae0e577a5a51f653ef0a93d4299c44e9dcba13882010d4bc58ee'
            'f9002afa9abad89fc4ccf19c1d780145439c6d6afce02fddda8b0130fd9691e1'
            '95c733b1b4e8d2a8b2b3fc4fb6669a3800d4756944dc231026514f3a422c7adf'
            '9c2dee249ba6fd79eb8d8142a4591e6a64d88d44d2bf49d486499f70c31b5bf3'
            '53bc1fc5f0c44072222c67ce5fa53a729643d5269d391b742bab1834bfe4d313'
            '5bddf0faf1194b7c759683290b1af786c79e0dcd79037e95b956772ef3ff5542'
            '59b410a6cbe6a33c91f54139e4a710fbd2dc29e771d60d49b7ec715d3d7e12fe'
            '17ff4ea2bf922badba9a6e2451d930d303ae9f55733900194f4e345c7d178b9a'
            '3f4165bf93ef02dcf35b704fb5483fd5460156150a831f762f1454911aee16a6'
            'd670d04c03e41f3dbc0ec9c49e50ba2231f610d8d34cb46e341baef3a8002a27'
            '299caa16bc960c3907e9513354e04f1f7683e4cb4972882ec5e92652f42a7070'
            '82427ed401357b5dbc4d095db2abc12d003501da31d49b2acd0c7899def50b2b'
            '88620fb4c05734f0da4e2ea7098d40ff8bdafe2485ab449085da769550ae18b6'
            '3a776118280a9f28d7f779d86b9a0328673ba4efb558ca4b7a47288a19b96546'
            '4352a282b865b2ee50b70d3d2537661dedc9617463cd3e61ddc52e12bb8b53ac'
            'db5b0d3d82736e8acd9289e7728af3845244c32ff7a8d2e4151e1efbe89f0c09'
            '79c6dcbf04c30c7edd21beaab80090fb7d00feddc5396e713617463879c65a8e'
            'a7776f80359426e1add5c3d2895953e7fd970aedb162e639b2df16d7a70fcb23'
            '8d4570520b9e7259c788e60e8e6d7c58c58bb5c5a99e46f03d13a23515491a18'
            'f3e6c8c98ea5172f424971bc20f128c7f1f6416af6944f58dad1048ba4dff168'
            'a07a110ec5bf4ebcfa1fa04e446ca00145caf72cc3d28d3f5937361f1b4e2e11'
            '005cd66bbec398917e56c0f3f06eebaba9d7fc351c12b215e4e1acf13355e56d'
            'cbcbd40d54e47b97bf44c305b2903f655c7afbf914a0d6c55fcf57ecf1c63713'
            '153060a602abfb32773533301cd06a1b43d43e782a0bb98c14019043ba9f767e'
            '3059893c86b3eee288edb6c7d958d84e92c67a7d8e55ad48a9470a2100b0a22e'
            'd02a7971e78702faee8625bdad452468b65db7606bc735c9257ff97d092a6b08'
            '5c8e2ec59f1e42f1dcc6d5527fcee741aef9e4832735facb96fc8d7fe2ea08b6'
            '484acccde28b0c52c566d5dcc85c5fadb0aa1581e53e48cdd3018ccf125acf7a')
