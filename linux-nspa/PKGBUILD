# Maintainer: Jordan Johnston <johnstonljordan@gmail.com>
# Contributor: Peter Jung ptr1337 <admin@ptr1337.dev>
# Contributor: Piotr Gorski <lucjan.lucjanov@gmail.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

### Tweak kernel options prior to a build via nconfig
_makemenuconfig=

# Compile ONLY used modules to VASTLY reduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

# Use the current kernel's .config file
# Enabling this option will use the .config of the RUNNING kernel rather than
# the ARCH defaults. Useful when the package gets updated and you already went
# through the trouble of customizing your config options.  NOT recommended when
# a new kernel is released, but again, convenient for package bumps.
_use_current=

# Microsoft Surface 7 specific config
# unset =y to use generic kernel config (builds everything)
_config_Surface7=y

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
# See, https://bugs.archlinux.org/task/31187
_NUMAdisable=y

### Disable MQ-Deadline I/O scheduler
_mq_deadline_disable=y

### Disable Kyber I/O scheduler
_kyber_disable=y

### Enable multigenerational LRU
_lru_enable=y

## Enable DAMON
_damon=

## enable SPECULATIVE_PAGE_FAULT
_spf_enable=y

## Enable Linux Random Number Generator
_lrng_enable=

## Apply Kernel automatic Optimization
_use_auto_optimization=y

# disable debug to lower the size of the kernel
_disable_debug=

## Enable zram/zswap ZSTD compression
_zstd_compression=y

_nf_cone=y

 pkgbase=linux-nspa
_major=6.2
#_minor=4
#_minorc=$((_minor+1))
#_rcver=rc8
pkgver=${_major}
_stable=${_major}.${_minor}
#_stable=${_major}
#_stablerc=${_major}-${_rcver}
#_srcname=linux-${_stable}
_srcname=linux-rt-devel-6.2-rt3
arch=(x86_64 x86_64_v3)
pkgdesc='Linux-NSPA: PREEMPT_RT_FULL kernel with a twist'
pkgrel=15
arch=('x86_64' 'x86_64_v3')
url="https://github.com/nine7nine/Linux-NSPA"
license=('GPL2')
options=('!strip')
makedepends=('bc' 'texlive-latexextra' 'libelf' 'pahole' 'cpio' 'perl' 'tar' 'xz' 'zstd' 'xmlto' 'git' 'gcc' 'gcc-libs' 'glibc' 'binutils' 'make' 'patch')
source=(
  "https://git.kernel.org/pub/scm/linux/kernel/git/rt/linux-rt-devel.git/snapshot/linux-rt-devel-6.2-rt3.tar.gz"
  "config"
  "config_surface7"
  "auto-cpu-optimization.sh"
  "0000-more-uarches-for-kernel-5.17+.patch"
  "0001-ClearLinux-patchwork.patch"
  "0002-sched-fair-Compile-out-NUMA-code-entirely-when-NUMA-.patch"
  "0003-x86-Enable-fast-strings-on-Intel-if-BIOS-hasn-t-alre.patch"
  "0004-pinctl-amd-threaded_irqs.patch"
  "0005-designware-i2c_IRQF_NO_THREAD.patch"
  "0006-background_reclaim_of_hugepages.patch"
  "0007-Reduce-SCHED_RR-timeslice-100-ms-10-jiffy.patch"
  "0008-mm-increase_max_map_count.patch"
  "0009-mm-vmscan-add-sysctl-knobs-for-protecting-the-workin.patch"
  "0010-kt-rcu-Make_the_grace_period_workers_unbound_again.patch"
  "0011-kt-smp-migrate_disable_in_smp_call_function_single_async.patch"
  "0012-kt-rtmutex-no-rcu-lock-while-spinning.patch"
  "0013-kt-timekeeping-suspend-fixes.patch"
  "0014-kt-pm-suspend_patches.patch"
  "0015-sched-fix_bad_task_migration_for_rt_tasks.patch"
  "0016-rtmutex-Limit_number_of_lock_stealing_for_non-RT_waiters.patch"
  "0017-schedutil-Fix_deadlock_between_cpuset_and_cpu_hotplug.patch"
  "0018-sched-Add_latency_priority_for_CFS_class.patch"
  "0019-hid-wacom-Silence_log_spam.patch"
  "0020-v4_timer-Move_from_a_push_remote_at_enqueue_to_pull_at_expiry_model.patch"
  "0021-softirq_rt_optmizations_v5.patch"
  "0022-kt-vm-mm_optimizations.patch"
  "0023-v2_sched-sched_fork-optimizations.patch"
  "0024-Kernel_tuning-CONFIG_NSPA.patch"
  "0025-workqueue-destroy_worker_vs_isolated_CPUs.patch"
  "0026-Add_support_for_epoll_min_wait.patch"
  "0027-cgroup-cpuset-Task_migration_optimization.patch"
  "0030-Microsoft_Surface_Support-6.1.patch"
  "0034-qspinlock-Optimize_pending_state_waiting_for_unlock.patch"
  "0036-locking-rwbase-Mitigate_indefinite_writer_starvation_v4.patch"
  "0037-pm-cpuidle_vs_preempt_rt.patch"  
  "0039-sched-Fix-put_task_struct-calls-under-PREEMPT_RT.patch"
  "0040-exit-Detect_and_fix_irq_disabled_state_in_oops.patch"
  "0041-locking-rwsem-Fix_rwsem_bugs.patch"
  "0042-iwlwifi-Add_missing_check_for_alloc_ordered_workqueue.patch"
  "0047-linux-git-updates_1.patch"
  "0048-linux-git-updates_2.patch"
  "0049-sched-rt_pick_next_rt_entity-check list_entry.patch"
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {

    cd ${srcdir}/$_srcname

    echo "Setting version..."
    scripts/setlocalversion --save-scmversion
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."

  if [ -n "$_config_Surface7" ]; then
      cp ../config_surface7 .config
  else
      cp ../config .config
  fi 

    if [ -n "$_use_auto_optimization" ]; then
        "${srcdir}"/auto-cpu-optimization.sh
    fi

    if [ -n "$_NUMAdisable" ]; then
        echo "Disabling NUMA from kernel config..."
        scripts/config --disable NUMA \
                       --disable AMD_NUMA \
                       --disable X86_64_ACPI_NUMA \
                       --disable NODES_SPAN_OTHER_NODES \
                       --disable NUMA_EMU \
                       --disable NEED_MULTIPLE_NODES \
                       --disable USE_PERCPU_NUMA_NODE_ID \
                       --disable ACPI_NUMA \
                       --disable ARCH_SUPPORTS_NUMA_BALANCING \
                       --disable NODES_SHIFT \
                       --undefine NODES_SHIFT \
                       --disable NEED_MULTIPLE_NODES
    fi

    if [ -n "$_mq_deadline_disable" ]; then
        echo "Disabling MQ-Deadline I/O scheduler..."
        scripts/config --disable MQ_IOSCHED_DEADLINE
    fi

    if [ -n "$_kyber_disable" ]; then
        echo "Disabling Kyber I/O scheduler..."
        scripts/config --disable MQ_IOSCHED_KYBER
    fi

    if [ "$_tickrate" = "perodic" ]; then
        echo "Enabling periodic ticks..."
        scripts/config --disable NO_HZ_IDLE \
                      --disable NO_HZ_FULL \
                      --disable NO_HZ \
                      --disable NO_HZ_COMMON \
                      --enable HZ_PERIODIC
    elif [ "$_tickrate" = "idle" ]; then
        echo "Enabling tickless idle..."
        scripts/config --disable HZ_PERIODIC \
                       --disable NO_HZ_FULL \
                       --enable NO_HZ_IDLE \
                       --enable NO_HZ \
                       --enable NO_HZ_COMMON
    elif [ "$_tickrate" = "full" ]; then
        echo "Enabling tickless idle..."
        scripts/config --disable HZ_PERIODIC \
                       --disable NO_HZ_IDLE \
                       --disable CONTEXT_TRACKING_FORCE \
                       --enable NO_HZ_FULL_NODEF \
                       --enable NO_HZ_FULL \
                       --enable NO_HZ \
                       --enable NO_HZ_COMMON \
                       --enable CONTEXT_TRACKING
    fi

    if [ -n "$_nf_cone" ]; then
        echo "Enabling FULLCONENAT..."
        scripts/config --module IP_NF_TARGET_FULLCONENAT \
                       --module NETFILTER_XT_TARGET_FULLCONENAT
    fi

    if [ -n "$_spf_enable" ]; then
        echo "Enabling SPECULATIVE_PAGE_FAULT LRU..."
        scripts/config --enable SPECULATIVE_PAGE_FAULT
    fi

    if [ -n "$_lru_enable" ]; then
        echo "Enabling multigenerational LRU..."
        scripts/config --enable ARCH_HAS_NONLEAF_PMD_YOUNG \
                       --enable LRU_GEN \
                       --enable LRU_GEN_ENABLED \
                       --disable LRU_GEN_STATS
    fi

#    if [ -n "$_damon" ]; then
#        echo "Enabling DAMON..."
#        scripts/config --enable DAMON \
#                       --disable DAMON_VADDR \
#                       --disable DAMON_DBGFS \
#                       --enable DAMON_PADDR \
#                       --enable DAMON_RECLAIM
#    fi

    if [ -n "$_lrng_enable" ]; then
        echo "Enabling Linux Random Number Generator ..."
        scripts/config --disable RANDOM_DEFAULT_IMPL \
                        --enable LRNG \
                        --enable LRNG_OVERSAMPLE_ENTROPY_SOURCES \
                        --set-val LRNG_OVERSAMPLE_ES_BITS 64 \
                        --set-val LRNG_SEED_BUFFER_INIT_ADD_BITS 128 \
                        --enable LRNG_IRQ \
                        --enable LRNG_CONTINUOUS_COMPRESSION_ENABLED \
                        --disable LRNG_CONTINUOUS_COMPRESSION_DISABLED \
                        --enable LRNG_ENABLE_CONTINUOUS_COMPRESSION \
                        --enable LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION \
                        --disable LRNG_COLLECTION_SIZE_512 \
                        --enable LRNG_COLLECTION_SIZE_1024 \
                        --disable LRNG_COLLECTION_SIZE_2048 \
                        --disable LRNG_COLLECTION_SIZE_4096 \
                        --disable LRNG_COLLECTION_SIZE_8192 \
                        --set-val LRNG_COLLECTION_SIZE 1024 \
                        --enable LRNG_HEALTH_TESTS \
                        --set-val LRNG_RCT_CUTOFF 31 \
                        --set-val LRNG_APT_CUTOFF 325 \
                        --set-val LRNG_IRQ_ENTROPY_RATE 256 \
                        --enable LRNG_JENT \
                        --set-val LRNG_JENT_ENTROPY_RATE 16 \
                        --enable LRNG_CPU \
                        --set-val LRNG_CPU_ENTROPY_RATE 8 \
                        --enable LRNG_DRNG_SWITCH \
                        --enable LRNG_KCAPI_HASH \
                        --module LRNG_DRBG \
                        --module LRNG_KCAPI \
                        --enable LRNG_TESTING_MENU \
                        --disable LRNG_RAW_HIRES_ENTROPY \
                        --disable LRNG_RAW_JIFFIES_ENTROPY \
                        --disable LRNG_RAW_IRQ_ENTROPY \
                        --disable LRNG_RAW_IRQFLAGS_ENTROPY \
                        --disable LRNG_RAW_RETIP_ENTROPY \
                        --disable LRNG_RAW_REGS_ENTROPY \
                        --disable LRNG_RAW_ARRAY \
                        --disable LRNG_IRQ_PERF \
                        --disable LRNG_ACVT_HASH \
                        --enable LRNG_RUNTIME_ES_CONFIG \
                        --disable LRNG_RUNTIME_MAX_WO_RESEED_CONFIG \
                        --disable LRNG_TEST_CPU_ES_COMPRESSION \
                        --enable LRNG_SELFTEST \
                        --disable LRNG_SELFTEST_PANIC
    fi

    if [ -n "$_disable_debug" ]; then
    scripts/config --disable DEBUG_INFO \
                       --disable DEBUG_INFO_BTF \
                       --disable DEBUG_INFO_DWARF4 \
                       --disable DEBUG_INFO_DWARF5 \
                       --disable PAHOLE_HAS_SPLIT_BTF \
                       --disable DEBUG_INFO_BTF_MODULES \
                       --disable SLUB_DEBUG \
                       --disable PM_DEBUG \
                       --disable PM_ADVANCED_DEBUG \
                       --disable PM_SLEEP_DEBUG \
                       --disable ACPI_DEBUG \
                       --disable SCHED_DEBUG \
                       --disable LATENCYTOP \
                       --disable DEBUG_PREEMPT
    fi

    ### Optionally use running kernel's config
    # code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
    if [ -n "$_use_current" ]; then
        if [[ -s /proc/config.gz ]]; then
            echo "Extracting config from /proc/config.gz..."
            # modprobe configs
            zcat /proc/config.gz > ./.config
        else
            warning "Your kernel was not compiled with IKPROC!"
            warning "You cannot read the current config!"
            warning "Aborting!"
            exit
        fi
    fi


    ### Optionally load needed modules for the make localmodconfig
    # See https://aur.archlinux.org/packages/modprobed-db
    if [ -n "$_localmodcfg" ]; then
        if [ -e $HOME/.config/modprobed.db ]; then
            echo "Running Steven Rostedt's make localmodconfig now"
            make ${BUILD_FLAGS[*]} LSMOD=$HOME/.config/modprobed.db localmodconfig
        else
            echo "No modprobed.db data found"
            exit
        fi
    fi

    echo "Applying default config..."
    make ${BUILD_FLAGS[*]}  olddefconfig
    make ${BUILD_FLAGS[*]} -s kernelrelease > version
    echo "Prepared $pkgbase version $(<version)"

    ### Running make nconfig
    [[ -z "$_makemenuonfig" ]] || make ${BUILD_FLAGS[*]} menuconfig

    ### Save configuration for later reuse
    cp -Tf ./.config "${startdir}/config-${pkgver}-${pkgrel}${pkgbase#linux}"

}

build() {
  cd ${_srcname}
  make ${BUILD_FLAGS[*]} -j3 all
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules"
    depends=('coreutils' 'kmod' 'initramfs')
    optdepends=('crda: to set the correct wireless channels of your country'
        'linux-firmware: firmware images needed for some devices'
    'modprobed-db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig')
    provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE)

  cd ${srcdir}/$_srcname

  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd ${_srcname}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

sha256sums=('c565a2e5f363fcf1cad30c722982524e92efecb7c53e15f704df35b477831389'
            '7d2984504a61ec26d82fec0f7c25ab8d2fe7d82546f1d4a39cc85dd0301d9bf9'
            'ccf3861eefa7174c01356fbfaa07d2bd442066c31618351ac355a83ba69fa563'
            'e1d45b5842079a5f0f53d7ea2d66ffa3f1497766f3ccffcf13ed00f1ac67f95e'
            '8d4a22387dbe7a9f339555c99bd70c55c033422026244b98cbfd93eb39fb99c2'
            '35a7cde86fb94939c0f25a62b8c47f3de0dbd3c65f876f460b263181b3e92fc0'
            '5c2a0c96dfa0909f1def1bf9ef0ad9b7e1b90263ca751a2cbd0956d009f0f7cb'
            'e3c106cfac323c6f677b698b080b48798ea63786a7153f81d9a21f749e73168d'
            '4f715ec191c760ede34963ea449c2f12cd58813cd0fa3a684297ab0f45c6ff49'
            '8e5edc5ae5282fae35684006f0aeea41c16523dc0482891dc6c15e40e87f6a53'
            '36928ee323a84d8eb75460619b8e2b6493ea6e03f438c0820f73aa79a58cf9b2'
            '05616703ad898f967b7055bdc6dc6c5aab33257005c2ef9d87d55af15c12927b'
            '925b3edafe5aae0e577a5a51f653ef0a93d4299c44e9dcba13882010d4bc58ee'
            '5b1a8092837cd06a57becbe8cace02c7da445761e0e6d53ea25d9f966b57ab3b'
            '815a609564ede2009837ff09843d89e4735467bd2a14fd89a610e14cb73f2587'
            '9c2dee249ba6fd79eb8d8142a4591e6a64d88d44d2bf49d486499f70c31b5bf3'
            '53bc1fc5f0c44072222c67ce5fa53a729643d5269d391b742bab1834bfe4d313'
            '2b0897c7ce14feef108c856abed79de52a761a3001f9c835e1f857d1ff275ae3'
            '5c902ea52d3257ffea9399183499feeb59b101f79b75975d5f30ade86f2798d9'
            'da259147de1c555f52558a1a6f6070e96b5f868713a274ffb78381baa9047af7'
            'e22faa7811a3de10affe5f7e6d671f263599c75f9f78cca6e3cdf7a9e36d71de'
            'ba640b93b7d4bce58b15ad2232f0547007b725c2f518a8b19902d45632da0a47'
            '4b64b1876a92096f165868095d3638b5664681662410afbb2af34543a597f792'
            '59b410a6cbe6a33c91f54139e4a710fbd2dc29e771d60d49b7ec715d3d7e12fe'
            '7f6f1c4b6c79cc033af9059ff3c400252220cf2747b66e1ffc51375c8dfcb4c5'
            '8511cff3907b1d688182dcab8a2378dcd16deabba3c4e02884ee56f9e32fcb86'
            'ad0547795b09249df3184311a88eaf5c6a146ae43f1b74b7479853ff3d97a708'
            '6763b3ce2e74b474445f455fd45cf82554e61d53a56ec50a73592710031b9383'
            '291eb19ef27bc9ece3f8afc8496b324b049af5ee961f6dba034497dd26918c69'
            '3e77a086f598ae68b8271aff793d6bc0c4734c62a7bd394e1942925065b406d6'
            '9fca36d6492c6ab4244f197f3cf5771d50b8bdad6061987a36bdc9a91cec0aa8'
            'd39a84348d7ecdef83262f708c5ef3676f0f6d5bfafc9d6e9ae01026cebddf13'
            '6266b4f5bef3dd5e11439505ede25edf400caf65447b35aeea0f045f1466860d'
            'b516980c9d6c26c4bc214a9543f8727a601305fb67adc715c937f33b12c8defb'
            'f80256e4c09cba4f2f48dcfca1f75e393189c9eabdcbcaef252b9b16546c2ad5'
            '01cc1c601a2da6899b0ce85cbb26a48550ad8fbbfef3acea33ff150d5a48e7fd'
            '4e0a09668f30e9351a741600b01263498a60fe258ea4e5beb96b6cd197de1413'
            '1304b96f81d568aa7745cc0039fe5c7ed51531ef73456d29c409b906e27d5647'
            '28c7f25a3e6bd2d6b381b37e6a869f74224aa08b8e8b38c2c256875f218a6dad'
            '182c50f8a2c913a7dd4bd3844a25b696798cb08456ba7d49d265efb17cad3195'
            'fb093df4ece2422864c7d7f038e1d06dc49e32c78d6499cbad3ff0a9d771045f'
            'b68091128cebde85455f6d24c5048447e33b1e32b2fcc104a6aa942b95de871c'
            '68a007213f4c82d34890d8ebcae31385976d046ffb663ec9e30716d8e7695cdc')

