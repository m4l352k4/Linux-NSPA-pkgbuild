From 954b66669717b3531bbc7d82040ca9804667047e Mon Sep 17 00:00:00 2001
From: Sultan Alsawaf <sultan@kerneltoast.com>
Date: Sun, 18 Jun 2023 00:43:45 -0700
Subject: [PATCH] softirq: Fix lock imbalance in local_bh{disable,enable} due
 to preempt

By checking if the current context is preemptible to determine whether the
softirq lock should be locked/unlocked, it is therefore possible for both
the softirq lock to not be unlocked and for the softirq lock to not be
locked when it should be.

Example of softirq lock not getting unlocked:
	local_bh_disable(); <-- preemptible(), lock is acquired
	preempt_disable();
	local_bh_enable();  <-- !preemptible(), lock isn't released
	preempt_enable();

Example of softirq lock not being locked when it should be:
	preempt_disable();
	local_bh_disable(); <-- !preemptible(), lock isn't acquired
	preempt_enable();
	// !bh-safe section <-- preemptible(), non bh-safe section
	local_bh_enable();

Fix both issues by acquiring/releasing the softirq lock unconditionally.

Signed-off-by: Sultan Alsawaf <sultan@kerneltoast.com>
---
 kernel/softirq.c | 22 +++++++++-------------
 1 file changed, 9 insertions(+), 13 deletions(-)

diff --git a/kernel/softirq.c b/kernel/softirq.c
index 612871dbcfa7..42372047f909 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -162,13 +162,9 @@ void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
 
 	/* First entry of a task into a BH disabled section? */
 	if (!current->softirq_disable_cnt) {
-		if (preemptible()) {
-			local_lock(&softirq_ctrl.lock);
-			/* Required to meet the RCU bottomhalf requirements. */
-			rcu_read_lock();
-		} else {
-			DEBUG_LOCKS_WARN_ON(this_cpu_read(softirq_ctrl.cnt));
-		}
+		local_lock(&softirq_ctrl.lock);
+		/* Required to meet the RCU bottomhalf requirements. */
+		rcu_read_lock();
 	}
 
 	/*
@@ -190,7 +186,7 @@ void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
 }
 EXPORT_SYMBOL(__local_bh_disable_ip);
 
-static void __local_bh_enable(unsigned int cnt, bool unlock)
+static void __local_bh_enable(unsigned int cnt)
 {
 	unsigned long flags;
 	int newcnt;
@@ -207,7 +203,7 @@ static void __local_bh_enable(unsigned int cnt, bool unlock)
 	newcnt = __this_cpu_sub_return(softirq_ctrl.cnt, cnt);
 	current->softirq_disable_cnt = newcnt;
 
-	if (!newcnt && unlock) {
+	if (!newcnt) {
 		rcu_read_unlock();
 		local_unlock(&softirq_ctrl.lock);
 	}
@@ -251,11 +247,11 @@ void __local_bh_enable_ip(unsigned long ip, unsigned int cnt)
 	 * in_serving_softirq() become true.
 	 */
 	cnt = SOFTIRQ_OFFSET;
-	__local_bh_enable(cnt, false);
+	__local_bh_enable(cnt);
 	__do_softirq();
 
 out:
-	__local_bh_enable(cnt, preempt_on);
+	__local_bh_enable(cnt);
 	local_irq_restore(flags);
 }
 EXPORT_SYMBOL(__local_bh_enable_ip);
@@ -268,7 +264,7 @@ void softirq_preempt(void)
 	if (WARN_ON_ONCE(__this_cpu_read(softirq_ctrl.cnt) != SOFTIRQ_OFFSET))
 		return;
 
-	__local_bh_enable(SOFTIRQ_OFFSET, true);
+	__local_bh_enable(SOFTIRQ_OFFSET);
 	/* preemption point */
 	__local_bh_disable_ip(_RET_IP_, SOFTIRQ_OFFSET);
 }
@@ -286,7 +282,7 @@ static inline void ksoftirqd_run_begin(void)
 /* Counterpart to ksoftirqd_run_begin() */
 static inline void ksoftirqd_run_end(void)
 {
-	__local_bh_enable(SOFTIRQ_OFFSET, true);
+	__local_bh_enable(SOFTIRQ_OFFSET);
 	WARN_ON_ONCE(in_interrupt());
 	local_irq_enable();
 }

